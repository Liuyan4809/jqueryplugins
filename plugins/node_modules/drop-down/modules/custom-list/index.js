import { shortcut } from './sidebar/index.js';

// ************************************************************************** 普通函数

/**
 * 点击自定义列表按钮事件
 */
function onBtnEvent(  g_$target, $target ) {
    
    let $btn = $target.closest('.drop-down__button');
    // 点击按钮事件
    if ($btn.length) {
        g_$target.toggleClass('drop-down__selected');
        if(g_$target.hasClass('drop-down__selected')){
        if( $('.drop-down__selected').not(g_$target).length ) {
            $('.drop-down__selected').not(g_$target).removeClass('drop-down__selected');
            g_$target.trigger( 'close' );
        } else {
            g_$target.trigger( 'open' );
        }
        } else {
            g_$target.trigger( 'close' );
        }
    }
}

/**
 * 计算父元素选中状态
 * @param {Object} $dd 检查节点
 * @param {Boolean} state 是否选中状态
 */
 function calculationParentState($dd,state){
    let boo = false;
    if($dd.data('level')<=1)return false;
    if(state){
      boo = true;
    }else{
      boo = checkStateAll($dd,false)&&checkStateAll($dd,false,'next');
    }
    return boo;
}

/**
 * 查找所有兄弟节点状态(是否需要出发父节点选中或取消状态改变)
 * @param {Object} $node 检查节点
 * @param {Boolean} state 想检验的状态
 * @param {String} mode 模式(向上查找还是向下查找)
 */
function checkStateAll($node,state,mode = 'prev'){
    // 是否全部选中
    let checkArr = [];
    // 是否完成查找
    let boo = false;
    // 查找
    function _find($node){
      let level = $node.data('level');
      let $other = $node[mode]('.level-'+level);
      if($other.length){
        checkArr.push($other.find('input[type="checkbox"]').prop('checked'));
        _find($other);
      }
    }
    _find($node);
    if(state){
      // 选中只有一个选中即可
      boo = -1 !== checkArr.indexOf(true);
    }else{
      // 取消状态要都取消
      boo = -1 === checkArr.indexOf(true);
    }
    return boo;
  }


/**
 * 设置父元素状态
 */
function setParentState($dd,state){
    let level = $dd.data('level')-1;
    let $parent = $($dd.prevAll('.level-'+level)[0]);
    // 设置父节点选中状态
    if(state){
        checkedNode($parent,$parent.find('input[type="checkbox"]'));
    }else{
        cancleNode($parent,$parent.find('input[type="checkbox"]'));
    }
}
    
/**
 * 选中节点
 */
function checkedNode($dd,$checkbox){
    $dd.addClass('tree-check-selected');
    $checkbox.attr('checked','checked').prop('checked',true);
}

/**
 * 取消节点
 */
function cancleNode($dd,$checkbox){
    $dd.removeClass('tree-check-selected');
    $checkbox.removeAttr('checked').prop('checked',false);
    // 计算父元素状态(是否取消选中)
    if(calculationParentState($dd,false)){
        // 取消父节点选中状态
    }
}

/**
 * 渲染全选按钮
 */
function renderCheckAll() {
    let html = '';
    html += '<div class="check-all-container">';
    html += '<input type="checkbox" lay-ignore class="tree-check-all"/>全选';
    html += '</div>';
    return html;
}

/**
 * 修正全选状态
 */
function  correctionCheckAllState( $selectAnim ) {
    let $CheckAll = $selectAnim.find( '.tree-check-all' );
    let $checkbox = $selectAnim.find( '.tree-check' );
    let $checkboxUsableList = $checkbox.not( '[disabled]' );
    let $checkboxCheckedList = $checkboxUsableList.filter( '[checked=checked]' );
    let isCheckAll = false;
    // 全选
    if( 0 !== $checkboxCheckedList.length && $checkboxUsableList.length === $checkboxCheckedList.length ) {
        isCheckAll = true;
        $CheckAll.attr('checked','checked').prop('checked',true)
            .addClass( 'tree-check-all--selected' );
    } else { // 非全选
        isCheckAll = false;
        $CheckAll.removeAttr('checked').prop('checked',false)
            .removeClass( 'tree-check-all--selected' );
    }
    return isCheckAll;
}






// ************************************************************************** 普通函数




// 算法对象
let algorithm = {
    natural($checkbox,$dd){// 自然算法( 由用户通过手动点击触发的 )
        let str = 'wargin';
        // 选中
        if ($checkbox.prop('checked')) {
            // 选中节点
            checkedNode($dd,$checkbox);
            // 计算父元素状态(是否选中)
            if(calculationParentState($dd,true))setParentState($dd,true);
        } else {
            // 取消节点判断是否取消父节点的选中状态
            if(!this.isLastChecked( $checkbox )){
            this.g_isCanCancle = true;
            cancleNode($dd,$checkbox);
            // 计算父元素状态(是否取消)
            if(calculationParentState($dd,false))setParentState($dd,false);
            str = '';
            }else{
            // 选中节点(最后一个节点,取消回滚)
            checkedNode($dd,$checkbox);
            }
            return str;
        }
    },
    intervene($checkbox,$dd,state){// 干预算法（）
        if(state){
            // 选中节点
            checkedNode($dd,$checkbox);
            if(calculationParentState($dd,true))setParentState($dd,true);
        }else{
            // 取消节点判断是否取消父节点的选中状态
            if(this.g_isCanCancle||!this.isLastChecked( checkbox )){
            cancleNode($dd,$checkbox)
            if(calculationParentState($dd,false))setParentState($dd,false);
            }else{
            // 选中节点(最后一个节点,取消回滚)
            checkedNode($dd,$checkbox);
            }
        }
    }
};

/**
 * 子节点关系
 */
 let childRelationship = (function(){
    // 记录点击过的节点
    let cache = [];
    // 点击的父节点的数据
    let fVal = null;
    // 顶级等级
    let topLevel = 1;
    let _info = '';
    return function ($dd,level,info){
    // 选中状态
    let state = $dd.hasClass('tree-check-selected');
    // 点击的checkbox
    let $checkbox = $dd.find('input[type="checkbox"]');
    // 第一次设置等级(点击父节点的时候需要存储的数据)
    if(level){     
        topLevel = level,
        fVal = $checkbox.val();
    }
    if(info){
        _info = info;
    }
    // 存储变化过的节点数据
    cache.push($checkbox.val());

    // 点击节点的下一个节点等级
    let $nextNode = $dd.next('dd');
    let nextLevel = $nextNode.data('level');

    // 判断是不是子节点
    if(topLevel < nextLevel&&$nextNode.length){
        // 是子节点(采用干预算法)
        this.checkboxEvent('intervene',$nextNode.find('input[type="checkbox"]'), state);
    }else{
        // 同级节点(结束递归点击)
        if( this.g_default_options.immediately ) {
            this.triggerChange(fVal,_info);
        }
        // 记录点击过的节点
        cache = [];
        // 点击的父节点的数据
        fVal = null;
        // 顶级等级
        topLevel = 1;
        _info = '';
        this.g_isCanCancle = false;
    }
    }
})();

/**
 * 初始化方法
 */
function init() {
    // 渲染下拉内容
    this.renderDOM(this.g_$target, this.g_default_options);
    // 绑定事件
    this.bindEvent();
}

/**
 * 渲染下拉内容
 */
function renderDOM() {
    let contentHtml = '<div class="drop-down__anim__content">';
    // 扁平化数据
    this.flattening( this.g_default_options.data, 1 );
        // 渲染侧边栏
    let sidebarHtml = this.renderSidebar();
    if( sidebarHtml ) {
        contentHtml += sidebarHtml;
        contentHtml += '<span class="drop-down__partition-line"></span>';
    }
    // 渲染节点树
    contentHtml += this.renderTree();
    contentHtml += '</div>';
    // 即刻 控制按钮
    let renderImmediatelyControlHtml = this.renderImmediatelyControl();
    if( renderImmediatelyControlHtml ) {
        contentHtml += renderImmediatelyControlHtml;
    }
    this.g_$selectAnim = this.g_$target.find('.drop-down__anim').html( contentHtml );
}

 /**
 * 扁平化数据,并设置等级
 * @param {Object} data 需要扁平化的数据
 * @param {Object} level 数据等级
 */
  function flattening(data, level) {
    for (let i = 0, item; item = data[i++];) {
        item.level = level;
        this.g_lowestLevel = Math.max( this.g_lowestLevel,level );
        this.g_flatteningData.push( item );
        if ( item[ this.g_default_options.children ] ) {
        this.flattening( item[ this.g_default_options.children ], level + 1);
        }
    }
}

/**
     * 渲染侧边栏
     * @param { 节点数组 } data 
     * @returns 
     */
 function renderSidebar() {
    let contentHtml = '';
    // 快捷项
    let shortcutHtml;
    if( this.g_default_options.shortcuts && this.g_default_options.shortcuts.length ) {
        shortcutHtml = shortcut( this.g_default_options );
    }
    if( shortcutHtml ) {
        contentHtml += '<div class="drop-down__sidebar">';
        contentHtml += '<h5 class="title">快捷纬度</h5>';
        contentHtml += shortcutHtml;
        contentHtml += '</div>';
    }
    return contentHtml;
}

 /**
   * 渲染树节点
   * @returns String
   */
  function renderTree() {
    let html = '';
    // 节点数据
    let data = this.g_flatteningData;
    let g_default_options = this.g_default_options;

    html += '<div class="tree-container">';

    if( g_default_options.shortcuts.length ) {
        html += '<h5 class="title">自定义纬度</h5>';
    }
        
    // 全选
    if( g_default_options.usingCheckAll ) {
        html += renderCheckAll();
    }

    html += '<dl>';
    for (let i = 0, item; item = data[i++];) {
        let isDisbaled = -1 !== g_default_options.disabledList.indexOf( item[g_default_options.unique] );
        let isChecked = -1===g_default_options.checked.indexOf(item[g_default_options.unique]);
        html += `<dd class="level-${item.level} ${isChecked?'':'tree-check-selected'}  ${ isDisbaled ? 'tree-check--disabled':'' }" data-level="${item.level}" style="padding-left: ${20 * item.level - 1}px">`;
        if( isDisbaled ) {
            html += `<input disabled type="checkbox" lay-ignore ${isChecked?'':'checked'} class="tree-check" value="${item[g_default_options.unique]}"/>`;
        } else {
            html += `<input type="checkbox" lay-ignore ${isChecked?'':'checked'} class="tree-check" value="${item[g_default_options.unique]}"/>`;
        }
        html += `<span class="tree-name">${item[g_default_options.display]}</span>`;
        html += '</dd>';
    }
    html += '</dl>';



    html += '</div>';
    return html;
}

/**
 * 即刻 控制按钮
 * @returns HTML String
 */
function renderImmediatelyControl() {
    let html = '';
  if( !this.g_default_options.immediately ) {
      html += '<div class="control">';
      html += '<button type="button" class="cancel">取消</button>';
      html += '<button type="button" class="confirm">应用</button>';
      html += '</div>';
  }
  return html;
}

/**
 * 绑定事件
 */
 function bindEvent() {
    let that = this;

    that.g_$target.on('click', function(e) {
        let $t = $(e.target);
        // 点击自定义列表按钮事件
        onBtnEvent( that.g_$target, $t );
        // 取消确定按钮事件
        that.onCancelConfirmEvent( $t );
        // checkbox事件
        that.onCheckboxEvent( $t, e );
        // 快捷选项点击事件
        that.onShortcutClickEvent( $t );
        // 点击全选按钮
        that.onClickCheckAll( $t );
    });


    that.g_$target.on( 'open', function() {
        
        if( !that.g_default_options.immediately ) {
            that.operationCache = that.getCheckedValues();
        }
    });

    that.g_$target.on( 'close', function() {
        
        if( !that.g_default_options.immediately ) {
            let $checkbox = that.g_$selectAnim.find( 'dd' ).not( '.tree-check--disabled' ).find( '.tree-check' );
            if( !that.operationCache.length )return;

            for( let i = 0, len = $checkbox.length; i < len; i++ ) {
                const $element = $( $checkbox[ i ] );
                let value = $element[ 0 ].value;
                if( -1 !== that.operationCache.indexOf( value ) ) {
                    checkedNode($element.closest('dd'), $element)
                } else {
                    cancleNode($element.closest('dd'), $element)
                }
            }
            // 修复默认数据设置
            that.repairDefault()
            // 清空操作缓存
            that.operationCache = [];

            if( that.g_default_options.usingCheckAll ) {
                // 修正全选状态
                correctionCheckAllState( that.g_$selectAnim );
            }
            
        }
    });
    // 修复默认数据设置
    that.repairDefault();
}

/**
 * 取消确定按钮事件
 * @param { Element } $target 
 */
 function onCancelConfirmEvent( $target ) {
    // 取消按钮
    let $cancel = $target.closest('.cancel');
    // 确定按钮
    let $confirm = $target.closest('.confirm');
    if( $cancel.length ) {
        this.g_$target.toggleClass('drop-down__selected');
        this.g_$target.trigger( 'close' );
    }else if( $confirm.length ) {
        this.g_$target.toggleClass('drop-down__selected');
        this.triggerChange( null )
        this.operationCache = [];
        this.g_$target.trigger( 'close' );
    }
}

function renderIndeterminate() {
    let $selected = this.g_$selectAnim.find('.tree-check-selected');
    this.g_$selectAnim.find('dd').removeClass('tree-check-selected--indeterminate')
    for(let i = 0, len = $selected.length; i < len; i++) {
        let $parent = $($selected[i])
        let parentLevel = $parent.data( 'level' )
        let $nextDd = $parent.next('dd')

        while($nextDd.length && parentLevel < $nextDd.data( 'level' )) {
            
            if($nextDd.not('[disabled]').length) {
                if(!$nextDd.hasClass('tree-check-selected')) {
                    $parent.addClass('tree-check-selected--indeterminate')
                    break
                }
            }
            $nextDd = $parent.next('dd')
        }
    }


}

/**
 * 发送事件
 */
 function triggerChange(currentVal,info){
    let fire  = {};
    fire.data = currentVal;
    fire.list = this.getCheckedValues();
    if(info){
      fire.warning = '最后一个节点';
    }
    this.g_$origin.trigger('change',fire);
    // 渲染半选样式
    // this.renderIndeterminate()
  };

// 获取所有的选中值
function getCheckedValues() {
    // 获取所有选中状态的checkbox
  let $brother = this.g_$selectAnim.find('.tree-check-selected');
  // 获取
  let checkedList = [];
  for (let i = 0, item; item = $brother[i++];) {
    checkedList.push($(item).find('input').val());
  }
  return checkedList;
}


/**
 * 多选框事件
 * @param { Element } $target 
 * @returns 
 */
 function onCheckboxEvent( $target, e ) {
    let $checkbox = $target.closest('.tree-check[type="checkbox"]');
    let $dd = $target.closest('dd');
    // 点击checkbox事件(主动触发采用自然算法)
    if ( $checkbox.length ){
        let str = this.checkboxEvent('natural',$checkbox);
        if( str ) {
            this.g_$origin.trigger( str );
        }
        if( this.g_default_options.usingCheckAll ) {
            correctionCheckAllState( this.g_$selectAnim );
        }
        e.stopPropagation();
    } else if( $dd.length ) {
        $dd.find('input[type="checkbox"]').trigger('click');
    }
}

/**
 * checkbox事件
 * @param {String} name 算法名称
 * @param {Object} $checkbox 当前点击的checkbox
 * @param {Boolean} state 点击的状态(不设置则按照节点状态判断)
 */
 function checkboxEvent(name,$checkbox,state) {
    let $dd = $checkbox.closest('dd');
    // 调用算法
    let info = this[name]($checkbox,$dd,state);
    // 子节点关系(触发点击子节点事件)
    this.childRelationship( $dd, name==='natural' ? $dd.data('level') : 0, info);
    return info;
}

/**
 * 快捷方式点击事件
 * @param { Element } $target 
 * @returns 
 */
 function onShortcutClickEvent( $target ) {
    let $shortcut = $target.closest('.shortcut-item');
    if ($shortcut.length) {
        this.g_$selectAnim.find( '.shortcut-item' ).removeClass( 'shortcut-item--active' );
        let attrValue = $shortcut.addClass( 'shortcut-item--active' ).attr( 'attr-value' );
        let values = attrValue.split( ',' );
        let $treeChecksAll = this.g_$selectAnim.find( '.tree-check' );
        let rules = '';
        for( let i = 0, len = values.length; i < len; i++ ) {
           rules += `[value=${ values[ i ] }]`;
            if( i + 1 < len ) {
                rules += ',';
            }
        }
        // 清除所有选中
        $treeChecksAll.prop( 'checked', false ).closest('dd[class^=level-]').removeClass('tree-check-selected');
        // 选中快捷选项对应的checkbox
        $treeChecksAll.filter( rules ).click();
        this.g_$target.toggleClass('drop-down__selected');
        this.triggerChange( null );
        this.operationCache = [];
        this.g_$target.trigger( 'close' );
    }
}

/**
 * 点击全选按钮事件
 */
function onClickCheckAll( $target ) {
    let $treeCheckAll = $target.closest('.tree-check-all');

    if ( $treeCheckAll.length ) {
        if( $treeCheckAll.prop( 'checked' ) ) {
            $treeCheckAll.attr( 'checked', 'checked' ).addClass('tree-check-all--selected');
            this.checkAll();
        } else {
            $treeCheckAll.removeAttr('checked').removeClass('tree-check-all--selected');
            this.deselectAll();
        }

    }
    
}

/**
 * 选中所有节点
 */
 function checkAll() {
    this.g_$selectAnim.find( 'dd' ).not( '.tree-check--disabled' ).addClass(' tree-check-selected')
        .find( '.tree-check' ).attr('checked','checked').prop('checked',true);
    // 即时响应
    if( this.g_default_options.immediately ) {
        this.triggerChange( null);
    }
}

/**
 * 取消全选
 */
 function deselectAll() {
    
    this.g_$selectAnim.find( 'dd' ).not( '.tree-check--disabled' ).removeClass(' tree-check-selected')
        .find( '.tree-check' ).removeAttr('checked').prop('checked',false);
    // 当有没有选中项时（包括选中禁用项）
    if( !this.g_$selectAnim.find( '.tree-check-selected' ).length ) {
        // 保留一项
        this.keepAItem();
    }

}



 /**
 * 修复默认数据设置
 */
  function repairDefault(){
    for (let i = 2; i <= this.g_lowestLevel; i++) {
      // 计算父元素状态(是否选中)
      this.g_$selectAnim.find('.tree-check-selected.level-'+i).each(function(i,item){
        let $dd = $(item);
        if(calculationParentState($dd,true))setParentState($dd,true);
      });
    }
  }
  
  /**
   * 判断是否是最后一个选中的节点(最少需要保留一个顶级节点)
   */
  function isLastChecked( $checkbox ){
    let level = $checkbox.parent( 'dd' ).data( 'level' );
    while(  level >= 1 ) {
        if( this.g_$selectAnim.find('.tree-check-selected.level-' + level).length > 1 ) {
            return false;
        }
        level--
    }
    return true;
  }


  /**
 * 保留一项
 */
function keepAItem() {
    let firstChild = this.getFirstChild( this.g_default_options.data );
    this.g_$selectAnim.find( '.tree-check' ).filter( '[value='+ firstChild[ this.g_default_options.unique ] +']' ).click();
}

/**
 * 获取第一个可用的节点
 */
function getFirstChild( data ) {
    for( let i = 0, len = data.length; i < len; i++ ) {
       const element = data[ i ];
       // 不是被禁用的节点
       if( -1 === this.g_default_options.disabledList.indexOf( element[ this.g_default_options.unique ] ) ) {
            let children = element[ this.g_default_options.children ];
            if( children && children.length ) {
                return this.getFirstChild( children );
            } else {
                return element;
            }
       }
    }
}





// 自定义列表组件对象
function createCustomListModule( $target, option, $origin ) {
    // 默认配置
    let g_default_options = {
        children: 'children',// 子数据对应的属性名
        usingCheckAll: false,// 使用全选
        checked: [],// 默认选中
        immediately: true, // 即时响应
        shortcuts: [], // 快捷选项
        disabledList: [] // 被禁用的数组
    };
    this.g_default_options = Object.assign( g_default_options, option );
    // 原始元素
    this.g_$origin =  $origin;
    // 主渲染元素DOM
    this.g_$target = $target;
    // 渲染的下拉内容主体
    this.g_$selectAnim = null;
    // 扁平化后的数据
    this.g_flatteningData = [];
    // 最低级子节点等级
    this.g_lowestLevel = 1;
    // 是否可以取消
    this.g_isCanCancle = false;
    // 操作缓存：用于记录取消操作之前的操作
    this.operationCache = [];
}

// 初始化方法
createCustomListModule.prototype.init = init;
// 渲染下拉内容
createCustomListModule.prototype.renderDOM = renderDOM;
// 扁平化数据,并设置等级
createCustomListModule.prototype.flattening = flattening;
// 渲染侧边栏
createCustomListModule.prototype.renderSidebar = renderSidebar;
// 渲染树节点
createCustomListModule.prototype.renderTree = renderTree;
// 即刻 控制按钮
createCustomListModule.prototype.renderImmediatelyControl = renderImmediatelyControl;
// 绑定事件
createCustomListModule.prototype.bindEvent = bindEvent;
// 取消确定按钮事件
createCustomListModule.prototype.onCancelConfirmEvent = onCancelConfirmEvent;
// 发送事件
createCustomListModule.prototype.triggerChange = triggerChange;
createCustomListModule.prototype.renderIndeterminate = renderIndeterminate;

// 获取所有的选中值
createCustomListModule.prototype.getCheckedValues = getCheckedValues;
// 修复默认数据设置
createCustomListModule.prototype.repairDefault = repairDefault;
// 判断是否是最后一个选中的节点(最少需要保留一个顶级节点)
createCustomListModule.prototype.isLastChecked = isLastChecked;
// 多选框事件
createCustomListModule.prototype.onCheckboxEvent = onCheckboxEvent;
// checkbox事件
createCustomListModule.prototype.checkboxEvent = checkboxEvent;
// 子节点关系
createCustomListModule.prototype.childRelationship = childRelationship;
// 自然算法
createCustomListModule.prototype.natural = algorithm.natural;
// 干预算法
createCustomListModule.prototype.intervene = algorithm.intervene;



// 方法 
// 全选
createCustomListModule.prototype.checkAll = checkAll;
// 取消全选
createCustomListModule.prototype.deselectAll = deselectAll;
// 保留一项
createCustomListModule.prototype.keepAItem = keepAItem;
// 获取第一个可用的节点
createCustomListModule.prototype.getFirstChild = getFirstChild;



// 快捷方式点击事件
createCustomListModule.prototype.onShortcutClickEvent = onShortcutClickEvent;
// 点击全选事件
createCustomListModule.prototype.onClickCheckAll = onClickCheckAll;







export default {
    render($target, option, $origin) {
        let customListModule = new createCustomListModule( $target, option, $origin );
        customListModule.init();
    }
}
